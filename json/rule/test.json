{
	"headers": [
		{
			"key": "mode",
			"value": "position",
			"style": "string"
		}
	],
	"items": [
		{
			"key": "o",
			"value": 0,
			"style": "number",
			"css": "o"
		}, {
			"key": "x",
			"value": 0,
			"style": "number",
			"css": "x"
		}, {
			"key": "test",
			"css": ""
		}
	],
	"priority": [
		{
			"key": "status",
			"order": "desc",
			"alter": ["win", 1, 0]
		}, {
			"key": "o",
			"order": "desc"
		}, {
			"key": "x",
			"order": "asc"
		}
	],
	"tweet": {
		"o": "${handleName}◯　→${o}◯ ${x}×",
		"x": "${handleName}×　→${o}◯ ${x}× ${absent}休",
		"thru": "スルー"
	},
	"actions": [
		{
			"name": "○",
			"css": "action_o",
			"button_css": "btn btn-primary btn-lg",
			"keyArray": "k1",
			"tweet": "o",
			"enable0": "return (player.status == 'normal' && !header.playoff);",
			"action0": "setMotion(player, 'o');\n player.o++;\n addQCount(players, header, property);"
		}, {
			"name": "×",
			"css": "action_x",
			"button_css": "btn btn-danger btn-lg",
			"keyArray": "k2",
			"tweet": "x",
			"enable0": "return true;",
			"action0": "setMotion(player, 'x');\n player.x++;\n if (property.penalty > 0) {\n player.absent = property.penalty;\n player.status = 'preabsent';\n }\n addQCount(players, header, property);"
		}
	],
	"global_actions": [
		{
			"name": "thru",
			"button_css": "btn btn-default",
			"group": "rule",
			"keyboard": "Space",
			"tweet": "thru",
			"enable0": "return true;",
			"action0": "addQCount(players, header, property);"
		}
	],
	"global_actions_repeat": [
		{
			"name": "",
			"button_css": "btn btn-default",
			"group": "rule",
			"indexes0": "return property.lots;",
			"enable1": "return true;",
			"action1": "header.nowLot = index;"
		}
	],
	"judgement": " angular.forEach(players.filter(function(item) {\n   /* rankがない人に限定 */\n   return (item.rank == 0);\n }), function(player, i) {\n   /* win条件 */\n   if (player.o >= property.winningPoint) {\n\n  win(player, players, header, property);\n  player.o = property.winningPoint;\n   }\n   /* lose条件 */\n   if (player.x >= property.losingPoint) {\n  lose(player, players, header, property);\n  player.x = property.losingPoint;\n   }\n });"
	,
	"calc": " angular.forEach(players, function(player, index) {\n   // pinch, chance\n   player.pinch  = (player.x == property.losingPoint  - 1) && (player.status == 'normal');\n   player.chance = (player.o == property.winningPoint - 1) && (player.status == 'normal');\n   \n   // キーボード入力時の配列の紐付け ローリング等の特殊形式でない場合はこのままでOK\n   player.keyIndex = index;\n });"
	,
	"lines": []
}
